<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>To be continued on Kesa</title>
    <link>/categories/to-be-continued/</link>
    <description>Recent content in To be continued on Kesa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/to-be-continued/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>未完待续_思忆|&lt;&lt;天之痕&gt;&gt;的二三事</title>
      <link>/post/2018/08/24/about-xuanyuan-sword/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/24/about-xuanyuan-sword/</guid>
      <description>  本文提纲(不做跳转引导) 先搞定音乐的插入问题 再写内容 ---------上面的记得清理掉 为什么叫思忆 从音乐给我的回忆入手:叙事性的音乐 | 健身的音乐 从故事给我的影响入手 从木鱼的事情入手:谈谈今日中午看到的命运 - 再结合天之痕人物的命运   </description>
    </item>
    
    <item>
      <title>笔记_未完待续|用户体验from梁宁</title>
      <link>/post/2018/09/08/from/</link>
      <pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/09/08/from/</guid>
      <description>开tm的坑 用户体验与结婚教练 改变一个人很难,不妨开始结婚前观察一个人得到契合度的预期
 模型: 观察判断人的模型 从外到内5个层次 结构:
 感知层 : 身材相貌穿衣等等 一部分天生 一部分角色化的 角色层框架: 每个人都生活在角色里并且被角色驯化
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-以上是浅层的关系&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-做用户 短期关系
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-以下是深层的关系&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-做产品 长期关系
 资源结构层: 财富 知识 精神结构 人脉等等的资源&amp;hellip;&amp;hellip;  有一篇文章 角色会被资源引导到不同的角色 只抓表面数据非常低级 : 不是优秀的产品经理 不能建立深度关系  能力圈 :  被存在感所扩充  内核 : 对自己存在感的定义  存在感之于人是刚需 是一定需要满足的东西 对存在感的寻求以及不安全感都是驱动创造的源泉  人在不断追求存在感的矛盾中就一直在扩充自己的能力圈 扩充能力圈是一件痛苦的事情    结构从内到外
 内核改变才会从内到外彻底的改变 什么样的内核就会有什么样的 : 能力 - 资源 - 角色 - 感知  模型的意义
 短期看到长期一个人愿意持续为自己变化的内在的动力 确认一下在漫长的不确定的未来里两人是否能携手拥抱这些不确定的变化 并在变化中彼此成熟\适配  事例:乔布斯的三个女人 :</description>
    </item>
    
    <item>
      <title>未完待续_Unity|CSharp的脚本优化</title>
      <link>/post/2018/09/07/unity-csharp/</link>
      <pubDate>Fri, 07 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/09/07/unity-csharp/</guid>
      <description>又开坑了 今天看了很多关于脚本优化的文章
说是很多其实也就是3篇左右
但是我觉得我领会的思想是比较足够的了
就是C#是个乖孩子 很懂事 但是懂事就不灵光
所以你得想法子让他少做系统内源的事情
多用一些方法让他做辛苦活而不去做那些自己带着的东西
这是个比喻 大家的博客主要优化的方向是减少DrawCall和GC</description>
    </item>
    
    <item>
      <title>未完待续_动话|虹猫蓝兔的回忆</title>
      <link>/post/2018/09/03/7-swords/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/09/03/7-swords/</guid>
      <description>挖坑缘由  它曾代表着国产动画的最高水平：简评《虹猫蓝兔七侠传》
 不得不说总是有无数这样情怀在身的创作者
他们在不断地挖掘曾经带给自己无限美好
也在不断回忆反思中传播更加优秀的观念和价值
我再一次被这种Up主打动
这次是这位</description>
    </item>
    
    <item>
      <title>未完待续_CSharp|&lt;&lt;编写高质量C#代码建议&gt;&gt;提炼</title>
      <link>/post/2018/09/01/c-c/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/09/01/c-c/</guid>
      <description>总结:  StopWatch 和 Time.DeltaTime 的比较  了解StopWatch这个数据类型也是用来做时长判断的 Stopwatch 和 DateTime 对比 : 具体用法见下面的详情  StopWatch就是个计时器 DateTime是了解从年月日时分秒毫秒的    StopWatch 和 Time.DeltaTime 的比较 在看到几次作者尝试调试代码比较速度的时候
我好多次看到了
Stopwatch watch1 = Stopwatch.StartNew();  这句话
我想到和我日常中用的Time.DeltaTime应该是一类东西
只不过这个可能更便捷更规范?
我自己想看看原码
然而我发现在Console下编程根本没有Time这个Unity中常用到的类
难道这个也是UnityEngine里面的东西?
没错 Time这个类的确是UnityEngine NameSpace下的
然而又是只读所以不能很清楚的知道到底是不是和StopWatch是Api同源
就没办法知道到底自己在Unity中是不是应该继续用Time.DeltaTime
不过总之还是很好地启发了我应该试试StopWatch
至少搜一搜它们之间的区别(🚄上没网有点小难受)
&amp;mdash;&amp;mdash;&amp;ndash;上网收获&amp;mdash;&amp;mdash;&amp;ndash;
查了一下发现没什么这两个东西有联系的网页
但是再次提醒了我 Time.DeltaTime指的是每帧的运行时长
Unity中之所以可以通过这种方法实现时间计算
是因为通过把运行的每帧的时间加起来得到的
和真实的时间是有区别的
计算可能完成但是渲染等其他计算耽误画面呈现从而让得到的时间往往比真实时间长一些
&amp;mdash;&amp;mdash;&amp;ndash;折了个腾&amp;mdash;&amp;mdash;&amp;ndash;
后来又看到了DateTime和StopWatch的争辩
发现这个事情大有可言
便搞了一阵儿
using System; using System.Diagnostics; using System.Threading; namespace TestInBook { internal class Program { public static void Main(string[] args) { // StopTimeTest(); // DateTimeTest(); Thread thread1 = new Thread(DateTimeTest); //线程1管DT Thread thread2 = new Thread(StopTimeTest); //线程1管SW Thread thread3 = new Thread(Cal2MethodDiff); //线程3管DT-SW thread1.</description>
    </item>
    
    <item>
      <title>未完待续_CSharp|ref &amp; out 参数的深入理解</title>
      <link>/post/2018/09/01/c-ref-out/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/09/01/c-ref-out/</guid>
      <description></description>
    </item>
    
    <item>
      <title>未完待续_Unity|Dotween的高级玩法</title>
      <link>/post/2018/08/27/unity-dotween/</link>
      <pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/27/unity-dotween/</guid>
      <description>简单常用方法 DoMove DoScale DoRotate
DoFade .SetDelay .SetEase
又是该死的DoTween 我不知道这是第几个记录DoTween用法的博文
甚至我怀疑我之前所有的博客都有过DoTween的回顾
还是菜的抠脚
这次一定学穿这玩意儿!</description>
    </item>
    
    <item>
      <title>未完待续_Unity|Unity Attribute 标签</title>
      <link>/post/2018/08/25/unity-unity-attribute/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/25/unity-unity-attribute/</guid>
      <description>一开始我真的是想全部总结一下的
但是我慢慢发现这个Attribute是没完没了的
既然它开放了自定义的方式
那么各种插件(例如Hierarchy2)和各种库都可以自定义一大堆
没有什么固定的
所以这里中途只打算记一些常用且重要的
很多没什么普遍价值的Attribute我就Pass了
前言  Attributes are markers that can be placed above a class, property or function in a script to indicate special behaviour.
 我在Unity Manual里怎么找也只有这一个页面,并没有详细的Attribute的使用说明,经过我反复在网上找到另一些文档才有了着落:
 References
Attribute是C#的语言特性1
Unity3d中的Attributes整理2
Untiy Tutorial: Attributes3
Unity ScriptAPI4
Unity3D 的一些Attribute (一些是5.0新的API)5
UnityEngine、UnityEditor中的所有 Attributes6
 据参考链接1内容和我自己的所见
Attribute是可以自定义的
即可以分为内置Attribute和自定义Attribute两部分
本文操作:
 列一下我自己认为比较有意义的一些内置Attribute
 写一下自定义Attribute的做法  内置Attribute(主要来自参考链接) AddComponentMenu 这个应该是各个插件脚本经常使用的
就是在Unity Editor的菜单里的Component选项卡里直接加选项
一定程度上让你自定义一个路径 以分类脚本并且简化脚本的添加
尝试时直接在已有脚本类下添加失败 不知道是不是只能在正确的第一个类下起作用
[AddComponentMenu(&amp;quot;Transform/Follow Transform&amp;quot;)] public class XJB001 : MonoBehaviour {.</description>
    </item>
    
    <item>
      <title>未完待续_Unity|RegularExpression(一)</title>
      <link>/post/2018/08/23/unityskill-regularexpression/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/23/unityskill-regularexpression/</guid>
      <description>又到了正则表达式困扰我的时候 这次怎么也要搞定这个玩意儿了
很早的时候这个东西就一直在我的计划内
但是我始终没有把它安排上
今天实在是不能逃过去了
干他妈的</description>
    </item>
    
    <item>
      <title>未完待续_游感|Back of the God of War</title>
      <link>/post/2018/08/04/back-of-the-god-of-war/</link>
      <pubDate>Sat, 04 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/04/back-of-the-god-of-war/</guid>
      <description> 前言 我就直接在题目处写未完待续了
这几日被汪老师1有时间可以把这段经历写一下抓去写代码
没有什么学习收获 倒是有一些认识上的新认知
不过还不是很成熟 按下不表
总是心里觉得有什么事没做
看来是没创作2
终于在这个回北京的间隙找到了一些空档
算是再挖一坑
游戏直观感受 一开始我心里是有一些距离的
毕竟上次摸着PSP玩摇蜡烛小游戏3的时候
我还没有初中毕业
奎托斯4上次的故事,或者说以往的对手,曾经的苦难或折磨
都已经不再有印象了
当然我是看过宣传片和E3的
尤其是E3让我一震
那段热血的杀戮好像还在眼前
但是早已淹没在漫长的远行与稠密的胡须中
时光好像带来了很多东西
至少带来了一个新生命 一把新武器
当然无情更是一脸&amp;rdquo;新&amp;rdquo;皱纹
当时我已明白 这是个成长的故事
至少成长是一个主旋律
没错 这段成长是多维度的
 少年阿特柔斯成神之路
壮年克瑞托死成人之路
 没有这么工整 是为了对仗硬凑的
不过我觉得是比较到位的
 少神不识神之位 尽现错愕 盘盘然终归有得
老神竟见儿教诲 暮然回首 人神何其是殊途
 但是这远没能对游戏内容做出更全面的描述
准确的说 游戏还是给了我很多难以忘记的瞬间
 掏出&amp;rdquo;锁链&amp;rdquo;的那一刻让我毫无防备地红了眼眶
说出&amp;rdquo;洛基&amp;rdquo;的那一刻让我难以置信地目瞪口呆
亮出&amp;rdquo;锤子&amp;rdquo;的那一刻让我意料之内地惊了又叹
 没错,这趟旅途是两个人互为终点的旅途
仿佛
仿佛阿特柔斯就是当年无人陪伴的小奎爷
如今的奎爷就是今后误入歧途的阿特柔斯
如果拿之前几作战神的眼光来看往往就是这个感觉
非常东方
我也看到了不少制作组别的尝试
我试着总结出来
也许这也是一个漫无截期的一坑
但是我至少现在想坚持下去
父子关系 此方面的铺陈相对浅层
但是前中期给我印象非常深
 有时间可以把这段经历写一下 ↩ 没错我用了这个词 ↩ 大多数人应该听说过战神著名的奖励关卡成人小游戏 ↩ 因为不记得原来的名字(百度后得知为Kratos) 而且这个名字实在很亲切 我就以此为其名了 ↩   </description>
    </item>
    
    <item>
      <title>未完待续_漫感|初探回味&lt;&lt;丘比特的恶作剧&gt;&gt;</title>
      <link>/post/2018/07/29/cupid/</link>
      <pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/07/29/cupid/</guid>
      <description>有一些悲伤和失望但是充满回味的再读 应着LK大大的提点,我熬了两天两夜的空档看完了三部曲.
不由得令自己感慨,这的确是一次很有趣的回味.
不过三部漫画给我的感觉的确并不相同,而且我显著的发现了一些客观原因.
之后我想好好讨论一下.
总的说是一次很好的契机,让我充分回味了当初的感动,
再次感谢LK大大!!!
这里有更多信息
&amp;lt;&amp;lt;虹玉&amp;gt;&amp;gt; 三部曲中相对稚嫩的第一部,没办法毕竟是第一部.
整个设定其实说起来就多少有些实验性质的东西,就是比较cult吧.
我能想到(虽然涉猎不多)的这种把与性有关的东西作为基础设定去认真讨论的作品,
其实是很少的,只是有些略为拔作的东西&amp;hellip;&amp;hellip;好像有
什么&amp;hellip;&amp;hellip;额就不举例了其实都是拔作.
但是这系列是个包装着&amp;rdquo;青年漫画&amp;rdquo;[色情描写的戏份是一定的]的探讨性和感情的作品.
而不单纯是个拔作,色情描写只是形式罢了.
我想在种种禁锢下第一作能做到以设定吸引读者就已经很不错了.
[因为是刚看完第三部的原因容我再翻一下第一部总结一下&amp;hellip;]
首先第一部作品就位之后的两部奠定了贯穿整个系列的组织模式,
我称之为&amp;rdquo;三部曲的共同特点&amp;rdquo;:
三部曲共同特点  以一个与性有关的很有趣的点为线索展开男主和各位人物的关联
 双女主
 以苦恋为主要内容 笔墨重点放在角色性格塑造和人物成长上(三观未必很正)
 尝试丰满&amp;rdquo;反派人物&amp;rdquo;(或者说非主要视点人物)(有好有坏,功力不稳定吧)  还有两点是我看了别人的网评发现的,我自己没有总结出来,但是我觉得很对:
 非常重视人物回忆的部分 没有或者很少有价值灌输(这点在日漫中比较令人舒服吧,不过青年漫都克制些)   https://site.douban.com/widget/notes/6296230/note/204785874/ 引用地址
 从各种意义上来说这些共同特点都不是什么新鲜东西,即便是它们的组合也经常在各种纯爱类型的动漫作品中出现,是一种相对Old School但是又强调&amp;rdquo;复杂&amp;rdquo;(没有单纯作恶的人,所有行为的动机都是有依据背景的)的一种做法.
第一部是系列比较保守的一次相对专注于第一个三部曲共同特点的漫画,
或者换个说法,叫做为后几部作品奠定相对稳定的风格,
这种共同特点我想很可能是北崎拓那个时期相对惯用的创作风格.
缺点 相对于之后的作品,本作缺点是很明显的,
人物行为的可信度相对较低,尤其是女二的最后,
说出来自己是&amp;rdquo;只是觉得自己需要一个男友 并没有想清楚&amp;rdquo;,
这个话没有铺垫的,
在一个相对很关注角色行为可信度的作品中,
这样的剧情我认为算是不小的失误.
也是我一开始回味的时候感到有些失望的原因.
但是我是理解的,毕竟这是三部曲中较早的作品.
没有第二部那种给人非常惊艳又可信很高的感觉,
也是能够理解的,对比下的嘛.
樱桃症候群 这个大概是毫无争议的整个系列最棒最吸引人
同时给人回味最深的作品了
我在回味之前还是深深地记着
&amp;ldquo;这是全系列最棒最棒的作品&amp;rdquo;
是非常讨喜也非常令人欣慰的一部作品
三人关系的合理化 首先这是个很难很难的事情
相对于第一部和第三部的合理化铺垫
第二部做的真的非常优秀,第一部不及第三部太过
很多很多三部曲
像是&amp;lt;教父&amp;gt;&amp;lt;蝙蝠侠:黑暗骑士&amp;gt;(对于教父我是这么认为的)</description>
    </item>
    
  </channel>
</rss>