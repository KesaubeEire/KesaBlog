<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UnitySkill on Kesa</title>
    <link>/categories/unityskill/</link>
    <description>Recent content in UnitySkill on Kesa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/unityskill/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>未完待续_Unity|Shader Graph学习</title>
      <link>/post/2018/10/01/unity-shader-forge/</link>
      <pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/10/01/unity-shader-forge/</guid>
      <description>视频教程 B站视频:UP_Shallot
YouTube视频:水面Shader
YouTube视频:Dissolve
[YouTube视频]()
简单介绍 本来想学ShaderForge的
无奈当时没有把握好机会
只能在事赶事的情况下学这个ShaderGraph了
也不错的
了解界面    功能 作用 图片     渲染预览 预览最终效果    预制窗口 存放预制体     了解快捷键    功能 快捷键     弹出组件框 空白处 Space   聚焦 F   添加\删除 连接 选择连接右键Delete   快速添加必备组件 拉出连接线后在空白处点击    了解各个小框 from Shallot Vector
Vector1 Vector2 Vector3 Vector4  Color</description>
    </item>
    
    <item>
      <title>心情|Young is Good</title>
      <link>/post/2018/09/28/young-is-good/</link>
      <pubDate>Fri, 28 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/09/28/young-is-good/</guid>
      <description> 屁股决定脑袋 </description>
    </item>
    
    <item>
      <title>Unity|Wheel of Unity项目模板</title>
      <link>/post/2018/09/20/unity-wheel-of-unity/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/09/20/unity-wheel-of-unity/</guid>
      <description>动机 之前总是觉得需要一个模板放一些必要的东西
但是总是没有去做
现在在UniTab新成员入驻前夕
正好想做出来这个东西
同时规范化我们的各种开发行为
总之就是这么着就搞成了
大体上完成了
之后补充细节填充内容
在根据大家的需要扩充就行
Coding地址</description>
    </item>
    
    <item>
      <title>未完待续_Unity|Catch up with Unity&amp;CSharp</title>
      <link>/post/2018/09/20/unity-catch-up-with-unity-csharp/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/09/20/unity-catch-up-with-unity-csharp/</guid>
      <description>前言 技术日新月异
Unity也渐渐地从一个被看不起的玩具引擎
变得健壮变得完善变得高效
我看到了Unity本身对Unity的简化追求
也看到了M$对Unity语言和支持的努力
M$_C#更新进展 在 Unity 中使用 .NET 4.x
Unity 更新进展 Unity Blog</description>
    </item>
    
    <item>
      <title>未完待续_Unity|CSharp的脚本优化</title>
      <link>/post/2018/09/07/unity-csharp/</link>
      <pubDate>Fri, 07 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/09/07/unity-csharp/</guid>
      <description>又开坑了 今天看了很多关于脚本优化的文章
说是很多其实也就是3篇左右
但是我觉得我领会的思想是比较足够的了
就是C#是个乖孩子 很懂事 但是懂事就不灵光
所以你得想法子让他少做系统内源的事情
多用一些方法让他做辛苦活而不去做那些自己带着的东西
这是个比喻 大家的博客主要优化的方向是减少DrawCall和GC</description>
    </item>
    
    <item>
      <title>未完待续_Unity|Dotween的高级玩法</title>
      <link>/post/2018/08/27/unity-dotween/</link>
      <pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/27/unity-dotween/</guid>
      <description>简单常用方法 DoMove DoScale DoRotate
DoFade .SetDelay .SetEase
又是该死的DoTween 我不知道这是第几个记录DoTween用法的博文
甚至我怀疑我之前所有的博客都有过DoTween的回顾
还是菜的抠脚
这次一定学穿这玩意儿!</description>
    </item>
    
    <item>
      <title>Unity|Unity Attribute 标签</title>
      <link>/post/2018/08/25/unity-unity-attribute/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/25/unity-unity-attribute/</guid>
      <description>根据Attribute首字母查看 一开始我真的是想全部总结一下的
但是我慢慢发现这个Attribute是没完没了的
既然它开放了自定义的方式
那么各种插件(例如Hierarchy2)和各种库都可以自定义一大堆
没有什么固定的
所以这里中途只打算记一些常用且重要的
很多没什么普遍价值的Attribute我就Pass了
修改记录:
- 180922: - 调整整体Attribute顺序,整体合并,并且按照字母排序 - 加入新的Attribute : Serialiable - 将前言修改为参考声明并移到文后  内置Attribute UnityEngine Attribute 注:截止到Unity Script2018.2版本的所有其他内置Attribute:
AddComponentMenu: 这个应该是各个插件脚本经常使用的
就是在Unity Editor的菜单里的Component选项卡里直接加选项
一定程度上让你自定义一个路径
以分类脚本并且简化脚本的添加
尝试时直接在已有脚本类下添加失败 不知道是不是只能在正确的第一个类下起作用
[AddComponentMenu(&amp;quot;Transform/Follow Transform&amp;quot;)] public class XJB001 : MonoBehaviour {...}  AssemblyIsEditorAssembly: 没啥用:汇编级属性。任何类在组装这个属性将被认为是编辑器类  BeforeRenderOrder: 搞不懂  CreateAssetMenuAttribute 这个在大神的链接里加了重点
应该是一个比较有意义的东西
但是很可惜这个需要比较Nb的内容作为玩法 目前我还把握不好
//用于创建自定义的ScriptableObject，具体为.asset 资源(是YAML) //支持在 Asset/Create/xx，也支持在 工程视图右键 //同名的资源，会自动更改名称 [CreateAssetMenu(fileName = &amp;quot;skill&amp;quot;, menuName = &amp;quot;skill Data&amp;quot;, order = 1)] public class MyAsset : ScriptableObject { public float we0 = Single.</description>
    </item>
    
    <item>
      <title>未完待续_Unity|RegularExpression(一)</title>
      <link>/post/2018/08/23/unityskill-regularexpression/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/23/unityskill-regularexpression/</guid>
      <description>又到了正则表达式困扰我的时候 这次怎么也要搞定这个玩意儿了
很早的时候这个东西就一直在我的计划内
但是我始终没有把它安排上
今天实在是不能逃过去了
干他妈的</description>
    </item>
    
    <item>
      <title>Unity|简易对象池(一)</title>
      <link>/post/2018/08/19/unity/</link>
      <pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/19/unity/</guid>
      <description>代码主要来源  https://blog.csdn.net/testiness_wind/article/details/81118772
 对象池的意义 这个博客开头把对象池(或者说池技术)描述的很到位了
 如果一种类型的对象需要经常被创建、销毁，为了提高性能，我们通常需要使用“池”技术，就如线程池、TCP连接池等一样。那么需要使用池技术的对象一般有哪些特征了？
（1）创建过程耗时
（2）不需要保存客户状态
（3）对象体积较大
（4）频繁创建/销毁
 P.S.P.S.这是个2005年的博文,功力可见一斑,用C#但是是拿接口做的,功能非常齐全丰富,但是也有那个时代技术文档解释少\难看懂的特征,不是以传播而主要是以记录为目的的
小坑 这个东西有些部分是不完善的
它达到了一个对象池的主要需求:用内存换时间(其实是换机器的CPU GPU性能1)
但是我也看到了很多地方对对象池的不同要求
  很多类型的对象被重新使用前，在某些情况下，需要被reset。至少，所有的成员变量都要设置成初始值。这可以在池中实现而不需要用户处理。何时和如何重置需要考虑以下两个方面：  重置是立即的（例如，在存储对象时即重置）还是延迟的（例如，在对象被重新使用后重置）。 重置是被池管理（例如，对于被放入池中的对象来说是透明的）还是声明池对象的类。   在上面的例子中，poolofMyClass池对象需要显示申明在类级别作用域。显然，当我们需要一个其它类型的对象池时就需要重新申明一个。或许我们可以实现一个对用户透明。 创建管理所有类型池的ObjectPool。 一些对象池类库管理了太多种类的可怕的资源（如内存，数据库连接，游戏对象，外部资产等）。这无疑增加了对象池的代码复杂度。 某些类型的资源是很珍贵的（如数据库连接），池需要显示上限并提供一个针对分配对象失败的安全措施； 当池中对象很多却很少使用时，或许需要收缩的功能（不管是自动的还是强制的）。 最后，池可以被多个线程共享，因此需要实现为线程安全的。   不得不说这个大佬把我所有遇到的问题都说了出来
还说了很多我完全没有注意到和完全没有认识到的问题
目前我遇到的问题就是&amp;rdquo;重置&amp;rdquo;和&amp;rdquo;类型&amp;rdquo; 还有一个比较局限于Unity的是一个Resources.Load的路径自定义问题2
路径的问题不解决的话那没针对一个路径就等再搞一个对象池
或者把路径也搞一个List放进去 倒是可以实现 我有空应该去试试 牛逼就是牛逼
上代码 using System.Collections.Generic; using UnityEngine; /*本脚本是一个对象池的学习脚本 *原地址: * https://blog.csdn.net/testiness_wind/article/details/81118772 * 思路: * 1.单例 * 2.获取对象池中的对象 * 3.回收游戏对象 * * 个人总结: * 优点: 够小巧 * 缺点: 不灵活,作为单例只能实现将读取路径定死这种傻事,但是Resources文件夹下经常是有很多分类文件夹的(像我这种强迫症),所以需要一个可以定制路径的部分 */ public class GameObjectPool { #region #endregion #region //------------------------1.</description>
    </item>
    
  </channel>
</rss>