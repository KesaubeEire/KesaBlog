<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSharp on Kesa</title>
    <link>/tags/csharp/</link>
    <description>Recent content in CSharp on Kesa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>未完待续_Unity|Catch up with Unity&amp;CSharp</title>
      <link>/post/2018/09/20/unity-catch-up-with-unity-csharp/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/09/20/unity-catch-up-with-unity-csharp/</guid>
      <description>前言 技术日新月异
Unity也渐渐地从一个被看不起的玩具引擎
变得健壮变得完善变得高效
我看到了Unity本身对Unity的简化追求
也看到了M$对Unity语言和支持的努力
M$_C#更新进展 在 Unity 中使用 .NET 4.x
Unity 更新进展 Unity Blog</description>
    </item>
    
    <item>
      <title>未完待续_Unity|CSharp的脚本优化</title>
      <link>/post/2018/09/07/unity-csharp/</link>
      <pubDate>Fri, 07 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/09/07/unity-csharp/</guid>
      <description>又开坑了 今天看了很多关于脚本优化的文章
说是很多其实也就是3篇左右
但是我觉得我领会的思想是比较足够的了
就是C#是个乖孩子 很懂事 但是懂事就不灵光
所以你得想法子让他少做系统内源的事情
多用一些方法让他做辛苦活而不去做那些自己带着的东西
这是个比喻 大家的博客主要优化的方向是减少DrawCall和GC</description>
    </item>
    
    <item>
      <title>未完待续_CSharp|&lt;&lt;编写高质量C#代码建议&gt;&gt;提炼</title>
      <link>/post/2018/09/01/c-c/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/09/01/c-c/</guid>
      <description>总结:  StopWatch 和 Time.DeltaTime 的比较  了解StopWatch这个数据类型也是用来做时长判断的 Stopwatch 和 DateTime 对比 : 具体用法见下面的详情  StopWatch就是个计时器 DateTime是了解从年月日时分秒毫秒的    StopWatch 和 Time.DeltaTime 的比较 在看到几次作者尝试调试代码比较速度的时候
我好多次看到了
Stopwatch watch1 = Stopwatch.StartNew();  这句话
我想到和我日常中用的Time.DeltaTime应该是一类东西
只不过这个可能更便捷更规范?
我自己想看看原码
然而我发现在Console下编程根本没有Time这个Unity中常用到的类
难道这个也是UnityEngine里面的东西?
没错 Time这个类的确是UnityEngine NameSpace下的
然而又是只读所以不能很清楚的知道到底是不是和StopWatch是Api同源
就没办法知道到底自己在Unity中是不是应该继续用Time.DeltaTime
不过总之还是很好地启发了我应该试试StopWatch
至少搜一搜它们之间的区别(🚄上没网有点小难受)
&amp;mdash;&amp;mdash;&amp;ndash;上网收获&amp;mdash;&amp;mdash;&amp;ndash;
查了一下发现没什么这两个东西有联系的网页
但是再次提醒了我 Time.DeltaTime指的是每帧的运行时长
Unity中之所以可以通过这种方法实现时间计算
是因为通过把运行的每帧的时间加起来得到的
和真实的时间是有区别的
计算可能完成但是渲染等其他计算耽误画面呈现从而让得到的时间往往比真实时间长一些
&amp;mdash;&amp;mdash;&amp;ndash;折了个腾&amp;mdash;&amp;mdash;&amp;ndash;
后来又看到了DateTime和StopWatch的争辩
发现这个事情大有可言
便搞了一阵儿
using System; using System.Diagnostics; using System.Threading; namespace TestInBook { internal class Program { public static void Main(string[] args) { // StopTimeTest(); // DateTimeTest(); Thread thread1 = new Thread(DateTimeTest); //线程1管DT Thread thread2 = new Thread(StopTimeTest); //线程1管SW Thread thread3 = new Thread(Cal2MethodDiff); //线程3管DT-SW thread1.</description>
    </item>
    
    <item>
      <title>未完待续_CSharp|ref &amp; out 参数的深入理解</title>
      <link>/post/2018/09/01/c-ref-out/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/09/01/c-ref-out/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>