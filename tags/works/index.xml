<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Works on Kesa</title>
    <link>/tags/works/</link>
    <description>Recent content in Works on Kesa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/works/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>心得|Tell Don’t Ask</title>
      <link>/post/2018/08/31/tell-don-t-ask/</link>
      <pubDate>Fri, 31 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/31/tell-don-t-ask/</guid>
      <description>今天突然看设计模式看到一个没有听说过的:
命令，不要去询问(Tell, Don’t Ask)”原则
我很好奇 于是去搜了一下详细的意思:
 这个原则讲的是，一个对象应该命令其它对象该做什么，而不是去查询其它对象的状态来决定做什么(查询其它对象的状态来决定做什么也被称作‘功能嫉妒（Feature Envy）’)。 这篇文章里有个很生动的例子，我至今记忆犹新：
if (person.getAddress().getCountry() == “Australia”)  这违反了Demeter定律1，因为这个调用者跟Person过于亲密。它知道Person里有一个Address，而Address里还有一个country。它实际上应该写成这样：
if (person.livesIn(“Australia”))  好的面向对象编程是告诉对象你要做什么，而不是询问对象的状态后根据状态做行动。数据和依赖这些数据的操作都应该属于同一个对象。
 我更好奇了,于是尽可能去搜英文原文,去看作者的本意和原生的例子:
 Procedural code gets information then makes decisions. Object-oriented code tells objects to do things.
— Alec Sharp
 但是等等看着英文很难受,总是没有动力去读完,于是我找到了CSDN另一位翻译了这个文章的大神的译文:
 迪米特法则强调一个问题：如果我们在实现某个方法时调用的对象越多，那么我们的程序耦合度就越高。一旦某个地方需要修改，都会带来麻烦。所以根据迪米特法则，我们在实现对象O的方法M时，M能够调用的对象应该只有：
- 对象O自己
- M的参数
- M内部创建的对象
- O的直接组件对象
举个之前写代码的例子:
BookList bookList = bookStore.getAllBooks(); if(!bookList.has(book.getID()){ bookList.addBook(book.getID(), book); }  代码很简单，我只是单纯的想往我们的商店中增加一本新的书。但是上面的这段简单的代码，依赖了bookStore、BookList甚至book对象，其实我们只是想单纯的在书店中加一本新书而已，我什么不能这么用呢？
bookStore.addNewBook(book);  这样,我们调用的代码仅仅依赖bookStore一个对象了
 深以为然,好文章
 迪米特法则也称为最小知识原则（Least Knowledge Principle, LKP），简单说，如果两个对象不必直接通信，那么这两个对象就不应当发生直接的相互作用。如果一个对象需要调用另外一个对象的某个方法的话，那么应该通过第三个对象来转发调用。迪米特法则可以简单的说成：Talk only to your immediate friends。 ↩   </description>
    </item>
    
    <item>
      <title>未完待续_Unity|Unity Attribute 标签</title>
      <link>/post/2018/08/25/unity-unity-attribute/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/25/unity-unity-attribute/</guid>
      <description>看都不看就给To Be Continued的标签 相比我也知道我是有多能拖哈哈哈😁(寒酸的笑容十分僵硬)
我想我应该是可以在回家期间搞定这么写一点都,,,吖那啥的东西的
但是想到我现在手机毫无流量 在火车上要怎么活下来呢&amp;hellip;
怎么活下来&amp;hellip;怎么活&amp;hellip;</description>
    </item>
    
    <item>
      <title>未完待续_Unity|RegularExpression(一)</title>
      <link>/post/2018/08/23/unityskill-regularexpression/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/23/unityskill-regularexpression/</guid>
      <description>又到了正则表达式困扰我的时候 这次怎么也要搞定这个玩意儿了
很早的时候这个东西就一直在我的计划内
但是我始终没有把它安排上
今天实在是不能逃过去了
干他妈的</description>
    </item>
    
    <item>
      <title>工作心得|产品模式的目的</title>
      <link>/post/2018/08/14/work-aim/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/14/work-aim/</guid>
      <description>一个产品始终需要一个针对人群
或者说创造一个模式的意义即为
对针对的人群有特定的意义
新的功能一下子加太多反而没有意义
阶梯性 成长性
对于一个不断更迭的产品来说更为重要
的吧
和牛哥讨论时的一点小小感悟
计划一定要有 但是产品设计不要一下太满</description>
    </item>
    
    <item>
      <title>心情|帽子的好处 &#43; 产品的属性</title>
      <link>/post/2018/08/13/advantage-of-caps/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/13/advantage-of-caps/</guid>
      <description> 戴帽子的好处 原来我从不戴帽子
没有这个习惯是一方面
另一方面是我一直是长一点的头发
没有这个诉求
直到我从头开始之后
哈哈我可他妈算是找到一个好帽子1
这之后我长时间体会到了Focus的感觉
没有了上面的视野 你会更专注于眼前的事
也许就是应对我这种性格最好的办法
我总是喜欢往上看 但是不喜欢往上爬
有了帽子我总是看着眼前的东西
自然就开始专注 少了无边际的瞎想 多了当下的行动
吧
但是这样也容易养成习惯躲闪的性格吧
毕竟有这个长长的帽檐之后
就会不自主的习惯于
利用这个帽檐躲闪不愿直面的目光和氛围
嗨工具
工具 社交 游戏 这是我总结的一个app
或是一个产品的三大标签
可能多少有一些偏差 但是我觉得还是挺中肯的
工具性:生产力
社交性:扩散性
游戏性:吸引力
 非常感谢隔壁404这个Bingo帽子的原主人 ↩   </description>
    </item>
    
  </channel>
</rss>